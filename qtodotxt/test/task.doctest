>>> import sys, os; sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))
>>> from qtodotxt.lib import todolib
>>> from datetime import date, timedelta

Unittests for the qtodotxt.lib.todolib.Task class

========================================
1. text only task
========================================

>>> task = todolib.Task('do something')
>>> task.text
'do something'
>>> len(task.contexts)
0
>>> len(task.projects)
0
>>> task.is_complete
False
>>> task.priority is None
True

========================================
2. task with two contexts
========================================

>>> task = todolib.Task('do something @context1 @context2')
>>> task.text
'do something @context1 @context2'
>>> task.contexts
['context1', 'context2']
>>> task.projects
[]
>>> task.priority is None
True
>>> task.is_complete
False

========================================
3. task with two projects
========================================

>>> task = todolib.Task('do something +project1 +project2')
>>> task.text
'do something +project1 +project2'
>>> task.contexts
[]
>>> task.projects
['project1', 'project2']
>>> task.priority is None
True
>>> task.is_complete
False

========================================
4. task with 2 projects and 2 contexts
========================================

>>> task = todolib.Task('do something @context1 @context2 +project1 +project2')
>>> task.text
'do something @context1 @context2 +project1 +project2'
>>> task.contexts
['context1', 'context2']
>>> task.projects
['project1', 'project2']
>>> task.priority is None
True
>>> task.is_complete
False

========================================
5. task with priority in the end of line (no priority should be set)
========================================

>>> task = todolib.Task('do something (A)')
>>> task.text
'do something (A)'
>>> task.contexts
[]
>>> task.projects
[]
>>> task.priority is None
True
>>> task.is_complete
False

========================================
6. task with priority in the start of line (no priority should be set)
========================================

>>> task = todolib.Task('(B) do something')
>>> task.text
'(B) do something'
>>> task.contexts
[]
>>> task.projects
[]
>>> task.priority
'B'
>>> task.is_complete
False

========================================
7. task with X at the beginning is complete
========================================

>>> task = todolib.Task('x this task is complete')
>>> task.text
'x this task is complete'
>>> task.contexts
[]
>>> task.projects
[]
>>> task.priority is None
True
>>> task.is_complete
True

========================================
8. a single "+" sign is not interpreted as a project
========================================

>>> task = todolib.Task('this task has a + in the middle')
>>> task.text
'this task has a + in the middle'
>>> task.contexts
[]
>>> task.projects
[]
>>> task.priority is None
True
>>> task.is_complete
False

========================================
9. increase task priority
========================================
>>> task = todolib.Task('this task has no Priority')
>>> task.priority is None
True
>>> task.increasePriority()
>>> task.priority
'Z'
>>> task.text
'(Z) this task has no Priority'
>>> task.increasePriority()
>>> task.priority
'Y'
>>> task.text
'(Y) this task has no Priority'
>>> task.increasePriority()
>>> task.priority
'X'
>>> task.text
'(X) this task has no Priority'

========================================
10. decrease task priority
========================================
>>> task = todolib.Task('this task has no Priority')
>>> task.priority is None
True
>>> task.decreasePriority()
>>> task.priority
'A'
>>> task.text
'(A) this task has no Priority'
>>> task.decreasePriority()
>>> task.priority
'B'
>>> task.text
'(B) this task has no Priority'
>>> task.decreasePriority()
>>> task.priority
'C'
>>> task.text
'(C) this task has no Priority'