========================================
Test Setup and Helper Methods
========================================
>>> import os, sys, doctest
>>> sys.path.insert(0, os.path.join('.', '..', '..'))
>>> from qtodotxt.lib import todolib
>>> def getNonExistingTempFile():
...   file = 'tempfile.txt'
...   if os.path.exists(file):
...     os.remove(file)
...   return file
>>> def printTask(task):
...   print 'Text:', task.text
...   print '  Contexts:', task.contexts
...   print '  Projects:', task.projects
...   print '  Is Complete:', task.is_complete
...   print '  Priority:', task.priority
>>> def saveAndReload(file):
...   filename = getNonExistingTempFile()
...   file.save(filename)
...   loadedfile = todolib.File()
...   loadedfile.load(filename)
...   return loadedfile
>>> def printTaskNames(file):
...   for task in file.tasks:
...     print task.text

========================================
1. Test save with a single task
========================================

>>> file = todolib.File()
>>> file.tasks.append(todolib.Task('do something +project1 @context1'))
>>> file = saveAndReload(file)
>>> printTask(file.tasks[0])
Text: do something +project1 @context1
  Contexts: [u'context1']
  Projects: [u'project1']
  Is Complete: False
  Priority: None

========================================
2. Test save with a two tasks (should be sorted)
========================================

>>> file = todolib.File()
>>> file.tasks.extend([
...   todolib.Task('do something +project1 @context1'), 
...   todolib.Task('(A) do something else +project1 @context2'), #first task
... ])
>>> file = saveAndReload(file)
>>> printTaskNames(file)
(A) do something else +project1 @context2
do something +project1 @context1

========================================
3. Test save with a five tasks (should be sorted)
========================================

>>> file = todolib.File()
>>> file.tasks.extend([
...   todolib.Task('do something +project1 @context1'),         
...   todolib.Task('(A) do something else +project1 @context2'), # will become task #1
...   todolib.Task('do something else +project1 @context2'),
...   todolib.Task('something else +project1 @context2'),
...   todolib.Task('abc +project1 @context2')                    # will become task #2
... ])
>>> file = saveAndReload(file)
>>> printTaskNames(file)
(A) do something else +project1 @context2
abc +project1 @context2
do something +project1 @context1
do something else +project1 @context2
something else +project1 @context2

========================================
4. Test getAllContexts()
========================================

>>> file = todolib.File()
>>> file.tasks.extend([
...   todolib.Task('task with @context1'),
...   todolib.Task('task with @context2'),
...   todolib.Task('task with @context1 and @context2'),
...   todolib.Task('task with @context1 and @context2 and @context3')])
>>> file.getAllContexts()
['context1', 'context2', 'context3']

========================================
5. Test getAllProjects()
========================================

>>> file = todolib.File()
>>> file.tasks.extend([
...   todolib.Task('task with +project1'),
...   todolib.Task('task with +project2'),
...   todolib.Task('task with +project1 and +project2'),
...   todolib.Task('task with +project1 and +project2 and +project3')])
>>> file.getAllProjects()
['project1', 'project2', 'project3']

========================================
6. File.load('') throws exception
========================================
>>> file = todolib.File()
>>> file.load('')
Traceback (most recent call last):
...
Error: Trying to load a file with an empty filename.

========================================
7. File.load(non-existing-file) throws exception
========================================
>>> file = todolib.File()
>>> filename = 'file-does-not-exist'
>>> if os.path.exists(filename):
...   os.remove(filename)
>>> file.load(filename)   
Traceback (most recent call last):
...
ErrorLoadingFile: [Errno 2] No such file or directory: 'file-does-not-exist'

========================================
8. File.save() throws exception (when the 'filename' isn't set)
========================================
>>> file = todolib.File()
>>> file.save()
Traceback (most recent call last):
...
ErrorSavingFile: 'Filename is None'
